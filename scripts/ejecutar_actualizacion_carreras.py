#!/usr/bin/env python3
"""
Script para actualizar las carreras y materias correctas
"""

import sys
import os
import mysql.connector
from mysql.connector import Error

# Configuraci√≥n de la base de datos
DB_CONFIG = {
    'host': 'localhost',
    'database': 'asistencias_rfid',
    'user': 'root',
    'password': ''
}

def ejecutar_sql_desde_archivo(cursor, archivo_sql):
    """Ejecutar comandos SQL desde un archivo"""
    try:
        print(f"üìÑ Ejecutando archivo: {archivo_sql}")
        
        with open(archivo_sql, 'r', encoding='utf-8') as file:
            sql_content = file.read()
        
        # Dividir por comandos (separados por ;)
        comandos = [cmd.strip() for cmd in sql_content.split(';') if cmd.strip()]
        
        for i, comando in enumerate(comandos, 1):
            if comando.strip():
                try:
                    cursor.execute(comando)
                    print(f"  ‚úÖ Comando {i} ejecutado correctamente")
                except Error as e:
                    print(f"  ‚ö†Ô∏è Warning en comando {i}: {e}")
                    continue
        
        return True
    except Exception as e:
        print(f"‚ùå Error ejecutando archivo {archivo_sql}: {e}")
        return False

def verificar_carreras(cursor):
    """Verificar que las carreras se insertaron correctamente"""
    try:
        cursor.execute("""
            SELECT id, nombre, codigo 
            FROM carreras 
            WHERE activa = TRUE 
            ORDER BY id
        """)
        
        carreras = cursor.fetchall()
        
        print(f"\nüìã Carreras registradas ({len(carreras)}):")
        for carrera in carreras:
            print(f"  {carrera[0]}. {carrera[1]} ({carrera[2]})")
        
        return len(carreras) > 0
    except Error as e:
        print(f"‚ùå Error verificando carreras: {e}")
        return False

def verificar_materias(cursor):
    """Verificar materias por carrera"""
    try:
        cursor.execute("""
            SELECT c.id, c.nombre, COUNT(m.id) as total_materias
            FROM carreras c
            LEFT JOIN materias m ON c.id = m.carrera_id AND m.activa = TRUE
            WHERE c.activa = TRUE
            GROUP BY c.id, c.nombre
            ORDER BY c.id
        """)
        
        resultados = cursor.fetchall()
        
        print(f"\nüìö Materias por carrera:")
        total_materias = 0
        for resultado in resultados:
            print(f"  {resultado[0]}. {resultado[1]}: {resultado[2]} materias")
            total_materias += resultado[2]
        
        print(f"\nüìä Total de materias: {total_materias}")
        return total_materias > 0
    except Error as e:
        print(f"‚ùå Error verificando materias: {e}")
        return False

def insertar_alumnos_ejemplo(cursor):
    """Insertar algunos alumnos de ejemplo con c√≥digos correctos"""
    try:
        print(f"\nüë®‚Äçüéì Insertando alumnos de ejemplo...")
        
        alumnos_ejemplo = [
            # Carrera 2 (TICs) - Diferentes semestres y grupos
            ("Juan Carlos P√©rez L√≥pez", "20240001", "Ingenier√≠a en Tecnolog√≠as de la Informaci√≥n y Comunicaciones", 3, "2301"),
            ("Mar√≠a Elena Garc√≠a Rodr√≠guez", "20240002", "Ingenier√≠a en Tecnolog√≠as de la Informaci√≥n y Comunicaciones", 3, "2302"),
            ("Luis Fernando Mart√≠nez S√°nchez", "20240003", "Ingenier√≠a en Tecnolog√≠as de la Informaci√≥n y Comunicaciones", 4, "2401"),
            ("Ana Sof√≠a Hern√°ndez Torres", "20240004", "Ingenier√≠a en Tecnolog√≠as de la Informaci√≥n y Comunicaciones", 4, "2402"),
            
            # Carrera 3 (ISC)
            ("Carlos Eduardo L√≥pez Morales", "20240005", "Ingenier√≠a en Sistemas Computacionales", 5, "3501"),
            ("Diana Patricia Ruiz Jim√©nez", "20240006", "Ingenier√≠a en Sistemas Computacionales", 5, "3502"),
            
            # Carrera 1 (Industrial)
            ("Roberto Miguel Flores Castro", "20240007", "Ingenier√≠a Industrial", 2, "1201"),
            ("Alejandra Beatriz Mendoza Vargas", "20240008", "Ingenier√≠a Industrial", 2, "1202"),
            
            # Carrera 4 (Mecatr√≥nica)
            ("Fernando Javier Ram√≠rez Ortega", "20240009", "Ingenier√≠a Mecatr√≥nica", 6, "4601"),
            ("Gabriela Monserrat Silva Delgado", "20240010", "Ingenier√≠a Mecatr√≥nica", 6, "4602"),
        ]
        
        # Limpiar tabla existente
        cursor.execute("DELETE FROM alumnos_base WHERE id > 0")
        
        for alumno in alumnos_ejemplo:
            cursor.execute("""
                INSERT INTO alumnos_base (nombre, matricula, carrera, semestre, grupo, activo)
                VALUES (%s, %s, %s, %s, %s, TRUE)
            """, alumno)
            print(f"  ‚úÖ Alumno insertado: {alumno[0]} - Grupo {alumno[4]}")
        
        print(f"‚úÖ {len(alumnos_ejemplo)} alumnos de ejemplo insertados")
        return True
    except Error as e:
        print(f"‚ùå Error insertando alumnos: {e}")
        return False

def insertar_docentes_ejemplo(cursor):
    """Insertar algunos docentes de ejemplo"""
    try:
        print(f"\nüë®‚Äçüè´ Insertando docentes de ejemplo...")
        
        docentes_ejemplo = [
            ("Dr. Miguel √Ångel Rodr√≠guez P√©rez", "DOC001", "Ingenier√≠a de Software"),
            ("Mtra. Laura Patricia Gonz√°lez Mart√≠nez", "DOC002", "Bases de Datos"),
            ("Ing. Jos√© Luis Hern√°ndez S√°nchez", "DOC003", "Redes y Comunicaciones"),
            ("Dra. Carmen Elena L√≥pez Torres", "DOC004", "Inteligencia Artificial"),
            ("Mtro. Ricardo Javier Morales Castro", "DOC005", "Programaci√≥n"),
            ("Ing. Ana Mar√≠a Jim√©nez Ruiz", "DOC006", "Matem√°ticas Aplicadas"),
            ("Dr. Fernando Gabriel Silva Mendoza", "DOC007", "Ciberseguridad"),
            ("Mtra. Claudia Alejandra Vargas Flores", "DOC008", "Administraci√≥n de Proyectos"),
        ]
        
        # Limpiar tabla existente
        cursor.execute("DELETE FROM docentes_base WHERE id > 0")
        
        for docente in docentes_ejemplo:
            cursor.execute("""
                INSERT INTO docentes_base (nombre, clave, especialidad, activo)
                VALUES (%s, %s, %s, TRUE)
            """, docente)
            print(f"  ‚úÖ Docente insertado: {docente[0]} - {docente[1]}")
        
        print(f"‚úÖ {len(docentes_ejemplo)} docentes de ejemplo insertados")
        return True
    except Error as e:
        print(f"‚ùå Error insertando docentes: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üîÑ === ACTUALIZACI√ìN DE CARRERAS Y MATERIAS ===\n")
    
    connection = None
    try:
        # Conectar a la base de datos
        print("üîå Conectando a la base de datos...")
        connection = mysql.connector.connect(**DB_CONFIG)
        cursor = connection.cursor()
        
        print("‚úÖ Conexi√≥n establecida")
        
        # Ejecutar script de actualizaci√≥n de carreras
        archivo_sql = "scripts/actualizar_carreras_correctas.sql"
        if not os.path.exists(archivo_sql):
            print(f"‚ùå Archivo no encontrado: {archivo_sql}")
            return False
        
        if not ejecutar_sql_desde_archivo(cursor, archivo_sql):
            print("‚ùå Error ejecutando script de carreras")
            return False
        
        # Confirmar cambios
        connection.commit()
        print("‚úÖ Cambios de carreras y materias confirmados")
        
        # Verificar carreras
        if not verificar_carreras(cursor):
            print("‚ùå Error verificando carreras")
            return False
        
        # Verificar materias
        if not verificar_materias(cursor):
            print("‚ùå Error verificando materias")
            return False
        
        # Insertar datos de ejemplo
        if not insertar_alumnos_ejemplo(cursor):
            print("‚ùå Error insertando alumnos de ejemplo")
            return False
        
        if not insertar_docentes_ejemplo(cursor):
            print("‚ùå Error insertando docentes de ejemplo")
            return False
        
        # Confirmar todos los cambios
        connection.commit()
        print("\n‚úÖ === ACTUALIZACI√ìN COMPLETADA EXITOSAMENTE ===")
        
        print(f"\nüìã Resumen:")
        print(f"  ‚úÖ Carreras actualizadas con IDs correctos")
        print(f"  ‚úÖ Materias de TICs corregidas")
        print(f"  ‚úÖ Alumnos de ejemplo con c√≥digos de grupo correctos")
        print(f"  ‚úÖ Docentes de ejemplo insertados")
        
        print(f"\nüî¢ C√≥digos de grupo:")
        print(f"  Formato: XYZW")
        print(f"  X = Carrera (1-8)")
        print(f"  Y = Semestre (1-9)")
        print(f"  Z = Siempre 0")
        print(f"  W = Grupo (1-4)")
        print(f"  Ejemplo: 2301 = TICs, 3er semestre, grupo 1")
        
        return True
        
    except Error as e:
        print(f"‚ùå Error de base de datos: {e}")
        if connection:
            connection.rollback()
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        if connection:
            connection.rollback()
        return False
    finally:
        if connection and connection.is_connected():
            cursor.close()
            connection.close()
            print("üîå Conexi√≥n cerrada")

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
